go.property("speed", 100)

local debugdraw = require "debug-draw.debug-draw"

function init(self)
	self.input = {}
	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	local pos = go.get_position()
	debugdraw.text('x:' .. math.floor(pos.x) .. '; y:' .. math.floor(pos.y), 0, 20)

	-- update player position
	if self.input[hash("move_up")] then
		self.dir.y = 1
	elseif self.input[hash("move_down")] then
		self.dir.y = -1
	else
		self.dir.y = 0
	end
	if self.input[hash("move_left")] then
		self.dir.x = -1
	elseif self.input[hash("move_right")] then
		self.dir.x = 1
	else
		self.dir.x = 0
	end
	-- normalize in case if we're moving diagonal
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end

	local newPos = pos + self.dir * self.speed * dt
	go.set_position(newPos)

	-- reset things
	self.correction = vmath.vector3()
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end
	end
end

function on_message(self, message_id, message, sender)
	print(self.dir)

	if message_id == hash("contact_point_response") then
		process_collision(self, message, sender)
	end
end

function process_collision(self, message, sender)
	if message.group == hash("walls") or message.group == hash("robot") then
    -- Get the info needed to move out of collision. We might
    -- get several contact points back and have to calculate
    -- how to move out of all of them by accumulating a
    -- correction vector for this frame:
    if message.distance > 0 then
      -- First, project the accumulated correction onto
      -- the penetration vector
      local proj = vmath.project(self.correction, message.normal * message.distance)
      if proj < 1 then
        -- Only care for projections that does not overshoot.
        local comp = (message.distance - message.distance * proj) * message.normal
        -- Apply compensation
        go.set_position(go.get_position() + comp)
        -- Accumulate correction done
        self.correction = self.correction + comp
      end
    end
	end
end