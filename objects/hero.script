go.property('speed', 50)

local TARGET_THRESHOLD = 16

local log = require 'utils.log'

local function reset(self)
	self.input = {}
	self.dir = vmath.vector3()
	self.facing = 'front'
	self.anim = nil
	self.correction = vmath.vector3()
	self.has_beacon = false
end

local function get_dir_by_facing(facing)
	local dir = vmath.vector3()
	if facing == 'back' then
		dir.y = 1
	elseif facing == 'right' then
		dir.x = 1
	elseif facing == 'left' then
		dir.x = -1
	else
		dir.y = -1
	end

	return dir
end

local function animate_character(self)
	local is_moving = vmath.length(self.dir) > 0

	if is_moving then
		if self.dir.y > 0 then
			self.facing = 'back'
		elseif self.dir.x == 0 then
			self.facing = 'front'
		elseif self.dir.x < 0 then
			self.facing = 'left'
		else
			self.facing = 'right'
		end
	end

	local prefix = 'hero'
	local state = is_moving and 'walk' or 'idle'
	local tool = self.has_beacon and 'beacon' or 'empty'
	local anim = hash(prefix .. '-' .. state .. '-' .. tool .. '-' .. self.facing)

	if self.anim ~= anim then
		self.anim = anim
		msg.post('#sprite', 'play_animation', {id = self.anim})
	end
end

local function trigger_action(self)
	if self.has_beacon == false then
		-- TODO: give feedback that there's no any action available
		print('HERO: no beacon, no action')
		return
	end

	local dir = get_dir_by_facing(self.facing)
	local pos = go.get_position()
	local to = pos + TARGET_THRESHOLD * dir
	local collision = physics.raycast(pos, to, {hash('machine')})

	if collision then
		print('Found machine!', collision.id)
		pos = go.get_position(collision.id)
	end

	msg.post('robot', 'signal_beacon', {position = pos})
end

local function process_collision(self, message, sender)
	if message.group == hash('beacon') then
		msg.post('beacon', 'set_parent', {parent_id = go.get_id()})
		msg.post('beacon', 'disable')
		self.has_beacon = true
	end

	if message.group == hash('wall') or message.group == hash('robot') or message.group == hash('machine') then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end

function init(self)
	reset(self)
	animate_character(self)
	msg.post('.', 'acquire_input_focus')
end

function update(self, dt)
	local pos = go.get_position()
	log.coords(pos, 8)

	-- update player position
	if self.input[hash('move_up')] then
		self.dir.y = 1
	elseif self.input[hash('move_down')] then
		self.dir.y = -1
	else
		self.dir.y = 0
	end
	if self.input[hash('move_left')] then
		self.dir.x = -1
	elseif self.input[hash('move_right')] then
		self.dir.x = 1
	else
		self.dir.x = 0
	end
	-- normalize in case if we're moving diagonal
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end

	local newPos = pos + self.dir * self.speed * dt
	go.set_position(newPos)

	-- update facing and switch to proper character animation
	animate_character(self)

	-- reset/track things
	self.correction = vmath.vector3()
end

function on_input(self, action_id, action)
	if action_id == hash('action_primary') then
		trigger_action(self)
	elseif action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('contact_point_response') then
		process_collision(self, message, sender)
	end
end
