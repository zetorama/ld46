go.property('distance_per_step', 8)
go.property('speed', 15)
go.property('should_walk_on_start', true)
go.property('max_attempts', 10)

local log = require 'utils.log'

local TARGET_THRESHOLD = 8

local function reset(self)
	msg.post('#highlight', 'disable')

	self.facing = 'front'
	self.anim = nil
	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
	self.target_position = nil
	self.attempts = 0

	self.connected_machine = nil
end

local function random_dir(facing)
	local dir = math.random(1, 8)
	if dir > 4 then
		local opposite_dir = {
			front = 4,
			back = 3,
			left = 2,
			right = 1
		}
		dir = opposite_dir[facing]
	end

	local dirs = {
		vmath.vector3(-1, 0, 0), -- go left
		vmath.vector3(1, 0, 0), -- go right
		vmath.vector3(0, -1, 0), -- go down
		vmath.vector3(0, 1, 0) -- go up
	}

	return dirs[dir]
end

local function animate_character(self)
	local is_moving = vmath.length(self.dir) > 0

	if is_moving then
		if self.dir.y > 0 then
			self.facing = 'back'
		elseif self.dir.x == 0 then
			self.facing = 'front'
		elseif self.dir.x < 0 then
			self.facing = 'left'
		else
			self.facing = 'right'
		end
	end

	local prefix = 'robot'
	local state = is_moving and 'walk' or 'idle'
	local tool = 'empty'
	local anim = hash(prefix .. '-' .. state .. '-' .. tool .. '-' .. self.facing)

	if self.anim ~= anim then
		self.anim = anim
		msg.post('#sprite', 'play_animation', {id = self.anim})
	end
end

local function stop(self)
	-- TODO: give feedback, that robot cannot move anymore
	print('ROBOT: no more walkie')
	go.cancel_animations('.', 'position')
	-- particlefx.stop('marker#particles')
	msg.post('marker', 'deactivate')

	self.target_position = nil
	self.attempts = 0

	if not self.connected_machine then
		self.facing = 'front'
	end
	self.dir = vmath.vector3()
	animate_character(self)
end

local retry = nil -- prevents circular calls (https://stackoverflow.com/a/11150669)

local function goto_target(self)
	if not self.target_position then
		stop(self)
		return
	end

	if self.connected_machine then
		msg.post(self.connected_machine, 'drop_connection')
		self.connected_machine = nil
	end

	-- go.set_position(self.target_position, 'marker')
	msg.post('marker', 'drop', {position = self.target_position})

	local pos = go.get_position()
	local dir = self.target_position - pos
	local distance = vmath.length(dir)

	if (distance <= TARGET_THRESHOLD) then
		stop(self)
		return
	end

	local axis
	if math.abs(dir.x) == 0 then
		axis = 'y'
	elseif math.abs(dir.y) == 0 then
		axis = 'x'
	else
		-- randomly select one of two directions
		axis = ({'x', 'y'})[math.random(10) > 5 and 1 or 2]
	end

	local shift = vmath.vector3()
	shift[axis] = math.max(-self.distance_per_step, math.min(dir[axis], self.distance_per_step))

	local cast_from = pos + vmath.vector3(2.5, 2.5, 0)
	local collision = physics.raycast(cast_from, cast_from + shift, {hash('machine'), hash('wall')})
	if collision then
		if collision.fraction < 0.1 then
			-- there's no much distance to walk, eh?
			retry(self)
		else
			-- make sure to stay out of walls
			shift = shift * math.floor(collision.fraction * 100 - 11) / 100
		end
	end

	local duration = vmath.length(shift) / self.speed
	if duration == 0 then
		stop(self)
	end

	self.dir = shift
	animate_character(self)

	go.animate(
		'.',
		'position',
		go.PLAYBACK_ONCE_FORWARD,
		pos + shift,
		go.EASING_OUTBACK,
		duration,
		0,
		function(self)
			goto_target(self)
		end
	)
end

local function retry(self)
	self.attempts = self.attempts + 1
	print('attempts', self.attempts, self.max_attempts)

	go.cancel_animations('.', 'position')
	if not self.target_position or self.attempts >= self.max_attempts then
		stop(self)
		return
	end

	if self.connected_machine then
		msg.post(self.connected_machine, 'drop_connection')
		self.connected_machine = nil
	end

	local pos = go.get_position()
	local shift = random_dir(self.facing) * self.distance_per_step / 2
	-- local shift = vmath.vector3()

	-- if self.attempts == 1 then
	-- 	-- first time just roll back a little
	-- 	shift = self.dir * -1/2
	-- else
	-- 	-- then, let's try to move along the other axis
	-- 	local axis = self.dir.x == 0 and 'x' or 'y'
	-- 	local dir = self.target_position[axis] > pos[axis] and 1 or -1
	-- 	if self.attempts > 2 then dir = dir * -1 end

	-- 	shift[axis] = self.distance_per_step / 2 * dir
	-- end

	go.animate('.', 'position', go.PLAYBACK_ONCE_FORWARD, pos + shift, go.EASING_OUTBACK, 1, 0, goto_target)
end

local function process_collision(self, message, sender)
	if message.group == hash('wall') or message.group == hash('hero') or message.group == hash('machine') then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp

				-- TODO: provide feedback when robot hits obstacle
				print('uh oh, robot vs. obstacle')

				-- Also, retry or stop
				if message.group == hash('wall') then
					self.attempts = self.attempts + 1
					retry(self)
				else
					stop(self)
				end
			end
		end
	end

	if message.group == hash('machine') then
		self.connected_machine = message.other_id
		msg.post(self.connected_machine, 'activate_connection')
	end
end

local function process_beacon(self, opts)
	stop(self)
	self.target_position = opts and opts.position or go.get_position('beacon')
	-- particlefx.play('marker#particles')
	msg.post('marker', 'activate')
	goto_target(self)
end

function init(self)
	reset(self)

	if self.should_walk_on_start then
		process_beacon(self)
	end
end

function update(self, dt)
	local pos = go.get_position()
	log.text(self.target_position and ('go to target' .. self.target_position) or 'idle', pos.x, pos.y + 12)

	-- log.text( '' , pos.x, pos.y + 16)
end

function on_message(self, message_id, message, sender)
	if message_id == hash('contact_point_response') then
		process_collision(self, message, sender)
	elseif message_id == hash('signal_beacon') then
		process_beacon(self, message)
	end
end
