go.property('speed', 33)

local log = require 'utils.log'

local function random_position(facing)
	local wall = math.random(1, 8)
	if wall > 4 then
		if go.get('marker#script', 'is_active') then
			return go.get_world_position('marker')
		end

		if facing then
			local opposite_wall = {
				front = 4,
				back = 3,
				left = 2,
				right = 1
			}
			wall = opposite_wall[facing]
		else
			wall = math.random(1, 4)
		end
	end

	if wall == 1 then
		return vmath.vector3(0, math.random(0, 320), 0)
	elseif wall == 2 then
		return vmath.vector3(200, math.random(0, 320), 0)
	elseif wall == 3 then
		return vmath.vector3(math.random(0, 200), 0, 0)
	else
		return vmath.vector3(math.random(0, 200), 320, 0)
	end
end

local function animate_character(self)
	local is_moving = vmath.length(self.dir) > 0

	if is_moving then
		if self.dir.y > 0 then
			self.facing = 'back'
		elseif self.dir.x == 0 then
			self.facing = 'front'
		elseif self.dir.x < 0 then
			self.facing = 'left'
		else
			self.facing = 'right'
		end
	end

	local prefix = 'alien'
	local state = is_moving and 'walk' or 'idle'
	local tool = 'empty'
	local anim = hash(prefix .. '-' .. state .. '-' .. tool .. '-' .. self.facing)

	if self.anim ~= anim then
		self.anim = anim
		msg.post('#sprite', 'play_animation', {id = self.anim})
	end
end

function init(self)
	self.correction = vmath.vector3()
	self.dir = vmath.vector3()
	self.facing = 'front'
	self.target_id = nil
	self.target_position = random_position(self.facing)
	self.tid = nil
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	local world_pos = go.get_world_position()
	self.dir = vmath.normalize(self.target_position - world_pos)

	local pos = go.get_position()
	local shift = self.dir * self.speed * dt
	local cast_from = pos + vmath.vector3(5, 5, 0)
	local collision = physics.raycast(cast_from, cast_from + shift, {hash('machine'), hash('wall')})

	if not collision then
		go.set_position(pos + shift)
		animate_character(self)
	end

	-- if we have a target id we assume that it will die this frame and pick a random
	-- target position and reset the target id flag.
	-- if the target is still alive the next frame we will get a new collision and
	-- we'll be able to set the target position again.
	if collision or self.target_id then
		self.target_position = random_position(self.facing)
		
		if self.tid then timer.cancel(self.tid) end
		self.tid = timer.delay(2, false, function(self) 
			print('timer on up') 
			self.target_position = random_position(self.facing) 
			self.tid = nil
		end)
	end
	self.target_id = nil
	self.correction = vmath.vector3()

end

function on_message(self, message_id, message, sender)
	if message_id == hash('collision_response') then
		if message.group == hash('hero') then
			local pos = go.get_world_position()
			local target_pos = go.get_world_position(message.other_id)

			if not physics.raycast(pos, target_pos, {hash('wall'), hash('machine')}) then
				self.target_position = target_pos
				self.target_id = message.other_id
			end
		end
	elseif message_id == hash('contact_point_response') then
		if message.group == hash('wall') or message.group == hash('machine') then
			-- Get the info needed to move out of collision. We might
			-- get several contact points back and have to calculate
			-- how to move out of all of them by accumulating a
			-- correction vector for this frame:
			if message.distance > 0 then
				-- First, project the accumulated correction onto
				-- the penetration vector
				local proj = vmath.project(self.correction, message.normal * message.distance)
				if proj < 1 then
					-- Only care for projections that does not overshoot.
					local comp = (message.distance - message.distance * proj) * message.normal
					-- Apply compensation
					go.set_position(go.get_position() + comp)
					-- Accumulate correction done
					self.correction = self.correction + comp
				end
			end

			self.target_position = random_position(self.facing)
		end
	end
end
